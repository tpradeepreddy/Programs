import java.io.*;
import java.util.*;
class node 
{
    node left,right;
    int key;
    node(int key)
    {
        left=right=null;
        this.key=key;
    }
}
class BST 
{
    node root;
    BST()
    {
        root=null;
    }
    node insert(node n,int key)
    {
        if(n==null)
        {
            n=new node(key);
            return n;
        }
        else if(key <= n.key ){
            n.left=insert(n.left,key);
        }
        else
        {
            n.right=insert(n.right,key);
        }
        return n;
    }
    void inorder(node n)
    {
        if(n!=null)
        {
            inorder(n.left);
            System.out.println(n.key);
            inorder(n.right);
        }
    }
    int findIS(node n)
    {
        int min=n.right.key;
        n=n.right;
        while(n!=null)
        {   
            min=n.key;
            n=n.left;
        }
        return min;
        
    }
        node delete(node n,int key)
        {
            if(key<n.key)
            {
                n.left=delete(n.left,key);
            }
            else if(key >n.key)
            {
                n.right=delete(n.right,key);
            }
            else
            {
                if(n.left==null)
                return n.right;
                else if(n.right==null)
                return n.left;
                else{
                    int temp=findIS(n);
                    n.key=temp;
                    n.right=delete(n.right,n.key);
                }
            }
            return n;
            
        }
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        BST t=new BST();
        for(int i=0;i<n;i++)
        {
            int e=sc.nextInt();
            t.root=t.insert(t.root,e);
        }
        t.inorder(t.root);
        t.delete(t.root,20);
        t.inorder(t.root);
        
        
        
        
    }
    
}
